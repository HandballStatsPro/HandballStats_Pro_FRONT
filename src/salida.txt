
--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\assets\react.svg ---

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\components\PrivateRoute.jsx ---

import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const PrivateRoute = ({ allowedRoles }) => {
  const { user } = useAuth();
  
  if (!user) return <Navigate to="/login" replace />;
  if (allowedRoles && !allowedRoles.includes(user.rol)) {
    return <Navigate to="/inicio" replace />;
  }
  return <Outlet />;
};

export default PrivateRoute;

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\components\Sidebar.jsx ---

import React, { useState, useEffect } from 'react';
import { Nav, OverlayTrigger, Tooltip } from 'react-bootstrap';
import { Link, useLocation } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import {
  FaHome,
  FaUser,
  FaUsers,
  FaSignOutAlt,
  FaChevronLeft,
  FaChevronRight,
  FaBuilding,
  FaUsersCog,
  FaFutbol,
  FaChartBar,
} from 'react-icons/fa';

const Sidebar = ({ onToggle }) => {
  const { user, logout } = useAuth();
  const location = useLocation();
  const [open, setOpen] = useState(true);

  const sidebarWidth = open ? 200 : 60;

  useEffect(() => {
    if (onToggle) onToggle(sidebarWidth);
  }, [open]);

  const backgroundStyles = {
    gradient: {
      background: 'linear-gradient(to bottom, #780000 0%, #669bbc 100%)',
    },
  };

  const linkItems = [
    { to: '/inicio', icon: <FaHome />, label: 'Inicio' },
    { to: '/profile', icon: <FaUser />, label: 'Perfil' },
    ...(user?.rol === 'Admin' 
      ? [{ to: '/users', icon: <FaUsers />, label: 'Usuarios' }] 
      : []),
    ...(['Admin', 'GestorClub'].includes(user?.rol) 
      ? [{ to: '/club', icon: <FaBuilding />, label: 'Clubes' }] 
      : []),
    { icon: <FaUsersCog />, label: 'Equipos' },
    { icon: <FaFutbol />, label: 'Partidos' },
    { icon: <FaChartBar />, label: 'Estadísticas' },
  ];

  return (
    <div
      style={{
        width: sidebarWidth,
        transition: 'width 0.3s ease',
        minHeight: '100vh',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'space-between',
        borderTopRightRadius: '10px',
        borderBottomRightRadius: '10px',
        ...backgroundStyles.gradient,
      }}
      className="position-fixed text-white"
    >
      {/* Toggle */}
      <div>
        <button
          className="btn btn-sm btn-light m-2"
          onClick={() => setOpen(!open)}
          style={{
            borderRadius: '50%',
            backgroundColor: '#f4f3f2',
            border: 'none',
            boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',
          }}
        >
          {open ? <FaChevronLeft /> : <FaChevronRight />}
        </button>

        <Nav className="flex-column mt-3">
          {linkItems.map(({ to, icon, label }) => {
            const active = to && location.pathname === to;
            const baseStyles = {
              gap: '10px',
              fontWeight: active ? '600' : '500',
              color: active ? '#000' : '#fff',
              backgroundColor: active ? '#f4f3f2' : 'transparent',
              transition: 'all 0.3s ease',
              cursor: to ? 'pointer' : 'default',
            };

            const hoverStyles = `
              .sidebar-link:hover {
                background-color: #f4f3f2 !important;
                color: black !important;
              }
            `;

            const link = to ? (
              <Nav.Link
                as={Link}
                to={to}
                className="d-flex align-items-center px-3 py-2 my-1 rounded sidebar-link"
                style={baseStyles}
              >
                {icon}
                {open && label}
              </Nav.Link>
            ) : (
              <div
                className="d-flex align-items-center px-3 py-2 my-1 rounded sidebar-link"
                style={baseStyles}
              >
                {icon}
                {open && label}
              </div>
            );

            return (
              <React.Fragment key={label}>
                <style>{hoverStyles}</style>
                {open ? (
                  link
                ) : (
                  <OverlayTrigger
                    placement="right"
                    overlay={<Tooltip id={`tooltip-${label}`}>{label}</Tooltip>}
                  >
                    <div>{link}</div>
                  </OverlayTrigger>
                )}
              </React.Fragment>
            );
          })}
        </Nav>
      </div>

      {/* Logout */}
      {user && (
        <div className="mb-3">
          <style>{`
            .logout-link:hover {
              background-color: #f4f3f2 !important;
              color: black !important;
            }
          `}</style>
          <OverlayTrigger
            placement="right"
            overlay={<Tooltip id="tooltip-logout">Cerrar sesión</Tooltip>}
          >
            <Nav.Link
              onClick={logout}
              className="d-flex align-items-center px-3 py-2 rounded mx-2 logout-link"
              style={{
                gap: '10px',
                color: 'black',
                fontWeight: '500',
                transition: 'all 0.3s ease',
              }}
            >
              <FaSignOutAlt />
              {open && <span style={{ color: 'black' }}>Cerrar Sesión</span>}
            </Nav.Link>
          </OverlayTrigger>
        </div>
      )}
    </div>
  );
};

export default Sidebar;

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\context\AuthContext.jsx ---

import { createContext, useContext, useState } from 'react';
import { login as loginReq, register as registerReq } from '../services/authService';
import { useNavigate } from 'react-router-dom';

const AuthContext = createContext();
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const navigate = useNavigate();

  const login = async ({ email, contraseña }) => {
    try {
      const data = await loginReq(email, contraseña);
      localStorage.setItem('token', data.token);
      setUser(data.usuario);
      return { success: true };
    } catch (error) {
      return { 
        success: false,
        message: error.response?.data?.message || 'Error de conexión',
        code: error.response?.data?.code || 'unknown_error'
      };
    }
  };

  const register = async ({ nombre, email, contraseña }) => {
    try {
      const result = await registerReq(nombre, email, contraseña);
      localStorage.setItem('token', result.token);
      setUser(result.usuario);      
      return { success: true };
    } catch (error) {
      return {
        success: false,
        message: error.response?.data?.message || 'Error en el registro',
        code: error.response?.data?.code || 'registration_failed'
      };
    }
  };


  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
    navigate('/login');
  };

  return (
    <AuthContext.Provider value={{ user, login, register, logout }}>
      {children}
    </AuthContext.Provider>
  );
};
export const useAuth = () => useContext(AuthContext);

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\pages\ClubForm.jsx ---

import React, { useState, useEffect } from 'react';
import { Form, Button, Container, Spinner, Alert, Table, Row, Col } from 'react-bootstrap';
import { useNavigate, useParams } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import {
  getClubById,
  createClub,
  updateClub,
  findUserByEmail,
  assignGestor,
  removeGestor,
} from '../services/clubService';

const ClubForm = () => {
  const { user } = useAuth();
  const { id } = useParams();
  const isEditing = Boolean(id);
  const navigate = useNavigate();

  const [form, setForm] = useState({
    nombre: '',
    ciudad: '',
    fechaCreacionClub: '',
  });
  const [gestorEmail, setGestorEmail] = useState('');
  const [gestores, setGestores] = useState([]);
  const [loading, setLoading] = useState(isEditing);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  useEffect(() => {
    if (!isEditing) return;
    (async () => {
      try {
        const data = await getClubById(id);
        setForm({
          nombre: data.nombre,
          ciudad: data.ciudad,
          fechaCreacionClub: data.fechaCreacionClub,
        });
        setGestores(data.gestores || []);
      } catch (err) {
        console.error(err);
        setError('Error al cargar el club');
      } finally {
        setLoading(false);
      }
    })();
  }, [id, isEditing]);

  const handleChange = e => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async e => {
    e.preventDefault();
    setError(''); setSuccess('');
    setSaving(true);

    try {
      if (isEditing) {
        await updateClub(id, form);
        setSuccess('Club actualizado correctamente');
      } else {
        await createClub(form);
        setSuccess('Club creado correctamente');
        navigate('/club');
      }
    } catch (err) {
      console.error(err);
      setError(err.response?.data?.message || 'Error guardando el club');
    } finally {
      setSaving(false);
    }
  };

  const handleAddGestor = async () => {
    setError(''); setSuccess('');
    if (!gestorEmail) return setError('Introduce un email');
    try {
      const u = await findUserByEmail(gestorEmail);
      if (u.rol !== 'GestorClub') {
        return setError('Solo puedes asignar gestores de club');
      }
      await assignGestor(id, u.idUsuario);
      setGestores([...gestores, { idUsuario: u.idUsuario, nombre: u.nombre }]);
      setGestorEmail('');
      setSuccess('Gestor asignado correctamente');
    } catch (err) {
      console.error(err);
      setError(err.response?.data?.message || 'Error asignando gestor');
    }
  };

  const handleDeleteGestor = async (idUsuario) => {
    if (!window.confirm("¿Eliminar gestor del club?")) return;

    try {
      await removeGestor(id, idUsuario); 
      setGestores(gestores.filter(g => g.idUsuario !== idUsuario));
      setSuccess('Gestor eliminado correctamente');
    } catch (err) {
      console.error(err);
      setError('Error eliminando gestor');
    }
  };

  if (loading) {
    return (
      <Container className="text-center mt-5">
        <Spinner animation="border" />
        <p>Cargando datos...</p>
      </Container>
    );
  }

  return (
    <div className="container mt-5">
      <h2 className="mb-4 text-center" style={{ color: '#780000' }}>
        {isEditing ? 'Editar Club' : 'Nuevo Club'}
      </h2>

      <div
        className="p-4"
        style={{
          background: 'white',
          borderRadius: '12px',
          boxShadow: '0 4px 16px rgba(0,0,0,0.1)',
        }}
      >

        <Form onSubmit={handleSubmit}>
          <Row className="mb-3">
            <Col md={6}>
              <Form.Group controlId="formNombre">
                <Form.Label>Nombre</Form.Label>
                <Form.Control
                  name="nombre"
                  value={form.nombre}
                  onChange={handleChange}
                  required
                  style={{ borderRadius: '8px' }}
                />
              </Form.Group>
            </Col>
            
            <Col md={6}>
              <Form.Group controlId="formCiudad">
                <Form.Label>Ciudad</Form.Label>
                <Form.Control
                  name="ciudad"
                  value={form.ciudad}
                  onChange={handleChange}
                  required
                  style={{ borderRadius: '8px' }}
                />
              </Form.Group>
            </Col>
          </Row>

          <Row className="mb-4">
            <Col md={6}>
              <Form.Group controlId="formFecha">
                <Form.Label>Fecha de Fundación</Form.Label>
                <Form.Control
                  name="fechaCreacionClub"
                  type="date"
                  value={form.fechaCreacionClub}
                  onChange={handleChange}
                  required
                  style={{ borderRadius: '8px' }}
                />
              </Form.Group>
            </Col>
          </Row>

          <div className="d-flex justify-content-end gap-3">
            <Button
              variant="secondary"
              onClick={() => isEditing ? setSuccess('') : navigate('/club')}
              style={{
                backgroundColor: '#f4f3f2',
                color: '#000',
                borderRadius: '8px',
                border: 'none',
                fontWeight: '600',
                padding: '8px 20px'
              }}
            >
              Cancelar
            </Button>
            <Button
              type="submit"
              disabled={saving}
              style={{
                backgroundColor: '#669bbc',
                borderRadius: '8px',
                border: 'none',
                fontWeight: '600',
                padding: '8px 25px'
              }}
            >
              {saving ? 'Guardando...' : 'Guardar'}
            </Button>
          </div>
        </Form>
        <br></br>
        {error && <Alert variant="danger" className="rounded-lg">{error}</Alert>}
        {success && <Alert variant="success" className="rounded-lg">{success}</Alert>}

        {isEditing && user.rol === 'Admin' && (
          <>
            <hr className="my-5" />

            <div className="mt-4">
              <h4 className="mb-4">Gestores Vinculados</h4>
              
              {gestores.length === 0 ? (
                <p className="text-muted">No hay gestores asignados</p>
              ) : (
                <Table hover className="rounded-lg overflow-hidden">
                  <thead style={{ backgroundColor: '#669bbc', color: 'white' }}>
                    <tr>
                      <th>Nombre</th>
                      <th className="text-end">Acciones</th>
                    </tr>
                  </thead>
                  <tbody>
                    {gestores.map(g => (
                      <tr key={g.idUsuario}>
                        <td>{g.nombre}</td>
                        <td className="text-end">
                          <Button 
                            variant="danger" 
                            size="sm"
                            onClick={() => handleDeleteGestor(g.idUsuario)}
                            style={{
                              borderRadius: '6px',
                              padding: '4px 12px',
                              fontWeight: '500'
                            }}
                          >
                            X
                          </Button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </Table>
              )}

              <div className="mt-4 p-3" style={{ backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
                <Row className="g-3 align-items-center">
                  <Col>
                    <Form.Control
                      placeholder="Email del gestor"
                      value={gestorEmail}
                      onChange={e => setGestorEmail(e.target.value)}
                      style={{ borderRadius: '8px' }}
                    />
                  </Col>
                  <Col xs="auto">
                    <Button 
                      onClick={handleAddGestor}
                      style={{
                        backgroundColor: '#669bbc',
                        border: 'none',
                        borderRadius: '8px',
                        padding: '8px 20px',
                        fontWeight: '600'
                      }}
                    >
                      Añadir Gestor
                    </Button>
                  </Col>
                </Row>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default ClubForm;

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\pages\Clubs.jsx ---

import React, { useEffect, useState } from 'react';
import { Table, Button, Container, Spinner, Alert } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { getClubs, deleteClub } from '../services/clubService';

const Clubs = () => {
  const { user } = useAuth();
  const [clubs, setClubs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const loadClubs = async () => {
    try {
      setLoading(true);
      setError('');
      const data = await getClubs(user.rol, user.idUsuario);
      setClubs(data);
    } catch (error) {
      setError('Error cargando clubes');
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (user) loadClubs();
  }, [user]);

  const handleDelete = async (id) => {
    if (window.confirm('¿Eliminar este club?')) {
      try {
        await deleteClub(id);
        loadClubs();
      } catch (error) {
        setError('Error eliminando club');
      }
    }
  };

  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    const date = new Date(dateString);
    return date.toLocaleDateString('es-ES', options);
  };

  if (loading) {
    return (
      <div className="text-center mt-5">
        <Spinner animation="border" variant="primary" />
        <p>Cargando clubes...</p>
      </div>
    );
  }

  return (
    <Container className="mt-5">
      <h2 className="mb-4 text-center" style={{ color: '#780000' }}>
        Gestión de Clubes
      </h2>

      {(user.rol === 'Admin' || user.rol === 'GestorClub') && (
        <div className="text-center mt-4">
          <Button
            onClick={() => navigate('/club/new')}
            style={{
              backgroundColor: '#669bbc',
              border: 'none',
              borderRadius: '8px',
              fontWeight: '600',
              padding: '10px 25px'
            }}
          >
            Nuevo Club
          </Button>
        </div>
      )}

      {error ? (
        <Alert variant="danger" className="text-center">
          {error} <Button variant="link" onClick={loadClubs}>Reintentar</Button>
        </Alert>
      ) : clubs.length === 0 ? (
        <div className="text-center">No se encontraron clubes</div>
      ) : (
        <div
          style={{
            background: 'white',
            borderRadius: '12px',
            boxShadow: '0 4px 16px rgba(0,0,0,0.1)',
            overflowX: 'auto',
          }}
        >
          <style>{`
            .btn-edit:hover { background-color: #f4f3f2 !important; color: black !important; }
            .btn-delete:hover { background-color: #f4f3f2 !important; color: black !important; }
          `}</style>

          <Table responsive striped hover className="mb-0">
            <thead>
              <tr style={{ backgroundColor: '#669bbc', color: 'white' }}>
                <th>Nombre</th>
                <th>Ciudad</th>
                <th>Fundación</th>
                {user.rol === 'Admin' && <th>Gestores</th>}
                <th className="text-center">Acciones</th>
              </tr>
            </thead>
            <tbody>
              {clubs.map(club => (
                <tr key={club.idClub}>
                  <td>{club.nombre}</td>
                  <td>{club.ciudad}</td>
                  <td>{formatDate(club.fechaCreacionClub)}</td>
                  {user.rol === 'Admin' && (
                    <td>
                      {club.gestores?.length > 0
                        ? club.gestores.map(g => `${g.idUsuario}.- ` + g.nombre ).join(', ')
                        : '-'}
                    </td>
                  )}
                  <td className="text-center">
                    <Button
                      size="sm"
                      className="btn-edit me-2"
                      style={{
                        backgroundColor: '#669bbc',
                        border: 'none',
                        borderRadius: '6px',
                        fontWeight: '500',
                      }}
                      onClick={() => navigate(`/club/${club.idClub}`)}
                    >
                      Editar
                    </Button>
                    {user.rol === 'Admin' && (
                      <Button
                        size="sm"
                        className="btn-delete"
                        style={{
                          backgroundColor: '#780000',
                          border: 'none',
                          borderRadius: '6px',
                          fontWeight: '500',
                        }}
                        onClick={() => handleDelete(club.idClub)}
                      >
                        Eliminar
                      </Button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
        </div>
      )}
    </Container>
  );
};

export default Clubs;

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\pages\Inicio.jsx ---

import React from 'react';
import { Container, Card, Row, Col } from 'react-bootstrap';

const Inicio = () => (
  <Container
    fluid
    className="d-flex flex-column align-items-center justify-content-start py-5"
    style={{ backgroundColor: '#f4f3f2', minHeight: '100vh' }}
  >
    <img
      src="/isotipo_sin_fondo.png"
      alt="HandballStatsPro"
      style={{
        width: '280px',
        marginBottom: '40px',
        filter: 'drop-shadow(3px 5px 8px rgba(0,0,0,0.25))',
      }}
    />

    <h1 className="mb-4 text-center" style={{ color: '#780000' }}>
      Bienvenido a HandballStats Pro
    </h1>

    <Row className="w-100 justify-content-center px-3" style={{ maxWidth: '1200px' }}>
      <Col md={6} className="mb-4">
        <Card style={{ borderLeft: '6px solid #669bbc', borderRadius: '16px' }}>
          <Card.Body>
            <Card.Title style={{ color: '#669bbc' }}>¿Qué es HandballStatsPro?</Card.Title>
            <Card.Text>
              Nuestra plataforma representa una innovación en el análisis del balonmano, centrada
              en capturar datos específicos de cada fase del juego, más allá de las estadísticas básicas.
            </Card.Text>
          </Card.Body>
        </Card>
      </Col>

      <Col md={6} className="mb-4">
        <Card style={{ borderLeft: '6px solid #780000', borderRadius: '16px' }}>
          <Card.Body>
            <Card.Title style={{ color: '#780000' }}>¿Por qué es diferente?</Card.Title>
            <Card.Text>
              A diferencia de otras apps deportivas, HandballStats Pro analiza con detalle el
              ataque, la defensa, los contraataques y los repliegues defensivos. Una herramienta
              hecha para quienes buscan profundidad táctica.
            </Card.Text>
          </Card.Body>
        </Card>
      </Col>

      <Col md={12}>
        <Card style={{ borderLeft: '6px solid #669bbc', borderRadius: '16px' }}>
          <Card.Body>
            <Card.Title style={{ color: '#669bbc' }}>¿Qué permite hacer?</Card.Title>
            <Card.Text>
              Calcula en tiempo real la eficacia y frecuencia de cada fase del juego, lo que
              facilita la toma de decisiones estratégicas basadas en datos reales y actuales.
              ¡Explora el menú lateral y comienza tu análisis avanzado hoy!
            </Card.Text>
          </Card.Body>
        </Card>
      </Col>
    </Row>
  </Container>
);

export default Inicio;

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\pages\Login.jsx ---

import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { Form, Button, Card } from 'react-bootstrap';

const Login = () => {
  const { login } = useAuth();
  const navigate = useNavigate();
  const [form, setForm] = useState({ email: '', contraseña: '' });
  const [error, setError] = useState({ message: '', type: '' });

  const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value });
  const handleSubmit = async e => {
    e.preventDefault();
    setError({ message: '', type: '' });
    
    const { success, message, code } = await login(form);
    
    if (success) {
      navigate('/inicio');
    } else {
      setError({
        message: code === 'bad_credentials' 
          ? 'Email o contraseña incorrectos' 
          : message,
        type: code
      });
    }
  };

  return (
    <div
      className="d-flex vh-100"
      style={{
        background: 'linear-gradient(90deg, #669bbc 0%, #780000 100%)',
      }}
    >
      <div className="w-50 d-flex align-items-center justify-content-center">
        <img
          src="/imagotipo_sin_fondo.png"
          alt="Logo"
          style={{
            maxWidth: '60%',
            filter: 'drop-shadow(2px 2px 4px rgba(0,0,0,0.3))',
          }}
        />
      </div>
      <div className="w-50 d-flex align-items-center justify-content-center">
        <Card
          style={{
            width: '80%',
            maxWidth: '400px',
            borderRadius: '16px',
            background: 'rgba(255,255,255,0.9)',
            boxShadow: '0 8px 30px rgba(0,0,0,0.2)',
            border: 'none',
            overflow: 'hidden',
          }}
        >
          <div
            style={{
              backgroundColor: '#780000',
              padding: '12px 0',
            }}
          >
            <h5 className="text-center text-white mb-0">Iniciar Sesión</h5>
          </div>
          <Card.Body>
            {error.message && (
              <div className={`alert ${error.type === 'validation_error' 
                ? 'alert-warning' 
                : 'alert-danger'} mb-3`}
              >
                {error.message}
              </div>
            )}
            <Form onSubmit={handleSubmit}>
              <Form.Group className="mb-3">
                <Form.Label>Email</Form.Label>
                <Form.Control
                  name="email"
                  type="email"
                  value={form.email}
                  onChange={handleChange}
                  required
                  style={{ borderRadius: '8px' }}
                />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>Contraseña</Form.Label>
                <Form.Control
                  name="contraseña"
                  type="password"
                  value={form.contraseña}
                  onChange={handleChange}
                  required
                  style={{ borderRadius: '8px' }}
                />
              </Form.Group>
              <Button
                type="submit"
                className="w-100"
                style={{
                  backgroundColor: '#780000',
                  border: 'none',
                  padding: '10px 0',
                  borderRadius: '8px',
                  fontWeight: '600',
                }}
              >
                Ingresar
              </Button>
            </Form>
            <p className="mt-3 text-center">
              ¿Todavía no tienes cuenta?{' '}
              <Link
                to="/register"
                style={{
                  backgroundColor: '#669bbc',
                  padding: '6px 12px',
                  borderRadius: '6px',
                  color: '#fff',
                  textDecoration: 'none',
                  fontWeight: 'bold',
                  transition: 'background-color 0.3s',
                }}
                onMouseEnter={e => (e.target.style.backgroundColor = '#546f8a')}
                onMouseLeave={e => (e.target.style.backgroundColor = '#669bbc')}
              >
                Regístrate
              </Link>
            </p>
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

export default Login;

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\pages\Profile.jsx ---

import React, { useEffect, useState } from 'react';
import { Form, Button, Row, Col } from 'react-bootstrap';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { getCurrentUser, getUserById, updateUser } from '../services/userService';
const Profile = () => {
  const { user } = useAuth();
  const { id } = useParams();
  const editingSelf = !id;
  const userId = id || user.idUsuario;
  const [data, setData] = useState(null);
  const [form, setForm] = useState({});
  const [editing, setEditing] = useState(false);
    const [errors, setErrors] = useState({
      general: '',
      email: '',
      password: ''
    });
  const navigate = useNavigate();

  useEffect(() => {
    const loadProfile = async () => {
        try {
            let userData;
            if (id) {
                userData = await getUserById(id);
            } else {
                userData = await getCurrentUser();
            }
            setData(userData);
            // Inicializar el formulario con los datos actuales
            setForm({
                nombre: userData.nombre,
                email: userData.email,
                contraseña: userData.contraseña,
                rol: userData.rol
            });
        } catch (error) {
            alert('Error al cargar perfil');
        }
    };
    
    loadProfile();
}, [id]);

  const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async e => {
    e.preventDefault();
    try {
        const updatedUser = await updateUser(userId, form);
        
        // Actualizar los datos locales
        setData(updatedUser);
        // Salir del modo edición
        setEditing(false);
        // Limpiar errores
        setErrors({ general: '', email: '', password: '' });
        
        // Si es admin, redirigir a lista de usuarios
        if (!editingSelf && isAdmin) {
            navigate('/users');
        }
        
    } catch (error) {
        if (error.response?.data?.code === 'email_existente') {
            setErrors({
                email: error.response.data.message,
                general: ''
            });
        } else {
            setErrors({
                general: error.response?.data?.message || 'Error al actualizar el perfil',
                email: ''
            });
        }
    }
};

  if (!data) return <p>Cargando...</p>;

  const isAdmin = user.rol === 'Admin';

  return (
    <div className="container mt-5">
      <h2 className="mb-4 text-center">Perfil de {data.nombre}</h2>

      {!editing ? (
        <div
          className="p-4"
          style={{
            background: 'white',
            borderRadius: '12px',
            boxShadow: '0 4px 16px rgba(0,0,0,0.1)',
          }}
        >
          <dl className="row mb-0">
            <dt className="col-sm-3">Nombre</dt>
            <dd className="col-sm-9">{data.nombre}</dd>

            <dt className="col-sm-3">Email</dt>
            <dd className="col-sm-9">{data.email}</dd>

            {isAdmin && (
              <>
                <dt className="col-sm-3">Rol</dt>
                <dd className="col-sm-9">{data.rol}</dd>
              </>
            )}

            <dt className="col-sm-3">Registrado</dt>
            <dd className="col-sm-9">
              {new Date(data.fechaRegistro).toLocaleDateString()}
            </dd>
          </dl>

          <div className="text-center mt-4">
            <Button
              onClick={() => setEditing(true)}
              style={{
                backgroundColor: '#780000',
                borderRadius: '8px',
                border: 'none',
                fontWeight: '600',
              }}
            >
              Editar Perfil
            </Button>
          </div>
        </div>
      ) : (
        <Form
          onSubmit={handleSubmit}
          className="p-4"
          style={{
            background: 'white',
            borderRadius: '12px',
            boxShadow: '0 4px 16px rgba(0,0,0,0.1)',
          }}
        >
          <Row className="mb-3">
            <Col md={6}>
              <Form.Group controlId="formNombre">
                <Form.Label>Nombre</Form.Label>
                <Form.Control
                  name="nombre"
                  value={form.nombre}
                  onChange={handleChange}
                  style={{ borderRadius: '8px' }}
                />
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group controlId="formEmail">
                <Form.Label>Email</Form.Label>
                <Form.Control
                  name="email"
                  type="email"
                  value={form.email}
                  onChange={handleChange}
                  isInvalid={!!errors.email}
                  style={{ borderRadius: '8px' }}
                />
                <Form.Control.Feedback type="invalid">
                  {errors.email}
                </Form.Control.Feedback>
              </Form.Group>
            </Col>
          </Row>

          {isAdmin && (
            <Row className="mb-3">
              <Col md={6}>
                <Form.Group controlId="formRol">
                  <Form.Label>Rol</Form.Label>
                  <Form.Select
                    name="rol"
                    value={form.rol}
                    onChange={handleChange}
                    style={{ borderRadius: '8px' }}
                  >
                    <option>Admin</option>
                    <option>GestorClub</option>
                    <option>Entrenador</option>
                  </Form.Select>
                </Form.Group>
              </Col>
            </Row>
          )}

          <Row className="mb-3">
            <Col md={6}>
              <Form.Group controlId="formPassword">
                <Form.Label>Contraseña</Form.Label>
                <Form.Control
                  name="contraseña"
                  type="password"
                  placeholder="Nueva contraseña"
                  value={form.contraseña}
                  onChange={handleChange}
                  style={{ borderRadius: '8px' }}
                />
              </Form.Group>
            </Col>
          </Row>
          {errors.general && (
              <div className="alert alert-danger mb-3">
                  {errors.general}
              </div>
          )}

          {!errors.general && data.updatedAt && (
              <div className="alert alert-success mb-3">
                  Perfil actualizado correctamente
              </div>
          )}
          <div className="text-center">
            <Button
              type="submit"
              style={{
                backgroundColor: '#669bbc',
                borderRadius: '8px',
                border: 'none',
                fontWeight: '600',
                marginRight: '10px',
              }}
            >
              Guardar
            </Button>
            <Button
              variant="secondary"
              onClick={() => setEditing(false)}
              style={{
                backgroundColor: '#f4f3f2',
                color: '#000',
                borderRadius: '8px',
                border: 'none',
                fontWeight: '600',
              }}
            >
              Cancelar
            </Button>
          </div>
        </Form>
      )}
    </div>
  );
};

export default Profile;

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\pages\Register.jsx ---

import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { Form, Button, Card } from 'react-bootstrap';

const Register = () => {
  const { register } = useAuth();
  const navigate = useNavigate();
  const [form, setForm] = useState({ nombre: '', email: '', contraseña: '' });
  const [errors, setErrors] = useState({
    general: '',
    email: '',
    password: ''
  });

  const handleChange = e => {
    setForm({ ...form, [e.target.name]: e.target.value });
    // Limpiar errores al escribir
    if (e.target.name === 'email') setErrors(prev => ({...prev, email: ''}));
    if (e.target.name === 'contraseña') setErrors(prev => ({...prev, password: ''}));
  };

  const handleSubmit = async e => {
    e.preventDefault();
    setErrors({ general: '', email: '', password: '' });
  
    const result = await register(form);
    
    if (result.success) {
      navigate('/inicio');
    } else {
      if (result.code === 'email_existente') {
        setErrors({
          email: result.message,
          general: ''
        });
      } else {
        setErrors({
          general: result.message || 'Error en el registro',
          email: ''
        });
      }
    }
  };
  
  return (
    <div className="d-flex vh-100" style={{
      background: 'linear-gradient(90deg, #669bbc 0%, #780000 100%)'
    }}>
      <div className="w-50 d-flex align-items-center justify-content-center">
        <img
          src="/imagotipo_sin_fondo.png"
          alt="Logo"
          style={{
            maxWidth: '60%',
            filter: 'drop-shadow(2px 2px 4px rgba(0,0,0,0.3))',
          }}
        />
      </div>
      
      <div className="w-50 d-flex align-items-center justify-content-center">
        <Card style={{
          width: '80%',
          maxWidth: '400px',
          borderRadius: '16px',
          background: 'rgba(255,255,255,0.9)',
          boxShadow: '0 8px 30px rgba(0,0,0,0.2)',
          border: 'none',
          overflow: 'hidden',
        }}>
          <div style={{
            backgroundColor: '#780000',
            padding: '12px 0',
          }}>
            <h5 className="text-center text-white mb-0">Registro</h5>
          </div>
          
          <Card.Body>
            {errors.general && (
              <div className="alert alert-danger mb-3" style={{ borderRadius: '8px' }}>
                {errors.general}
              </div>
            )}

            <Form onSubmit={handleSubmit}>
              <Form.Group className="mb-3">
                <Form.Label>Nombre</Form.Label>
                <Form.Control
                  name="nombre"
                  type="text"
                  value={form.nombre}
                  onChange={handleChange}
                  required
                  style={{ borderRadius: '8px' }}
                />
              </Form.Group>

              <Form.Group className="mb-3">
                <Form.Label>Email</Form.Label>
                <Form.Control
                  name="email"
                  type="email"
                  value={form.email}
                  onChange={handleChange}
                  required
                  isInvalid={!!errors.email}
                  style={{ borderRadius: '8px' }}
                />
                <Form.Control.Feedback type="invalid">
                  {errors.email}
                </Form.Control.Feedback>
              </Form.Group>

              <Form.Group className="mb-3">
                <Form.Label>Contraseña</Form.Label>
                <Form.Control
                  name="contraseña"
                  type="password"
                  value={form.contraseña}
                  onChange={handleChange}
                  required
                  isInvalid={!!errors.password}
                  style={{ borderRadius: '8px' }}
                />
                <Form.Control.Feedback type="invalid">
                  {errors.password}
                </Form.Control.Feedback>
              </Form.Group>

              <Button
                type="submit"
                className="w-100"
                style={{
                  backgroundColor: '#780000',
                  border: 'none',
                  padding: '10px 0',
                  borderRadius: '8px',
                  fontWeight: '600',
                }}
              >
                Regístrate
              </Button>
            </Form>

            <p className="mt-3 text-center">
              ¿Ya tienes cuenta?{' '}
              <Link
                to="/login"
                style={{
                  backgroundColor: '#669bbc',
                  padding: '6px 12px',
                  borderRadius: '6px',
                  color: '#fff',
                  textDecoration: 'none',
                  fontWeight: 'bold',
                  transition: 'background-color 0.3s',
                }}
                onMouseEnter={e => (e.target.style.backgroundColor = '#546f8a')}
                onMouseLeave={e => (e.target.style.backgroundColor = '#669bbc')}
              >
                Login
              </Link>
            </p>
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

export default Register;

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\pages\Users.jsx ---

import React, { useEffect, useState } from 'react';
import { Table, Button, Container, Spinner } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { getUsers, deleteUser } from '../services/userService';

const Users = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const load = () => {
    setLoading(true);
    setError('');
    
    getUsers()
      .then(data => {
        if (Array.isArray(data)) {
          setUsers(data);
        } else {
          setError('Formato de datos inválido');
          console.error('Respuesta inesperada:', data);
        }
      })
      .catch(err => {
        setError('Error cargando usuarios');
        console.error('Error:', err);
      })
      .finally(() => setLoading(false));
  };

  useEffect(() => {
    load();
  }, []);

  const handleDelete = async id => {
    if (window.confirm('¿Seguro que quieres eliminar este usuario?')) {
      try {
        await deleteUser(id);
        load();
      } catch (error) {
        let message = 'Error al eliminar';
        
        if (error.response?.data?.code === 'user_has_relations') {
          message = 'No se puede eliminar: El usuario tiene clubes asociados';
        }
        
        setError(message);
      }
    }
  };

  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    const date = new Date(dateString);
    return date.toLocaleDateString('es-ES', options);
  };

  return (
    <Container className="mt-5">
      <h2 className="mb-4 text-center" style={{ color: '#780000' }}>
        Gestión de Usuarios
      </h2>

      {loading ? (
        <div className="text-center">
          <Spinner animation="border" variant="primary" />
          <p>Cargando usuarios...</p>
        </div>
      ) : error ? (
        <div className="alert alert-danger text-center">
          {error}
          <Button variant="link" onClick={load}>Reintentar</Button>
        </div>
      ) : users.length === 0 ? (
        <div className="text-center">No hay usuarios registrados</div>
      ) : (
        <div
          style={{
            background: 'white',
            borderRadius: '12px',
            boxShadow: '0 4px 16px rgba(0,0,0,0.1)',
            overflowX: 'auto',
          }}
        >
          <style>{`
            .btn-edit:hover { background-color: #f4f3f2 !important; color: black !important; }
            .btn-delete:hover { background-color: #f4f3f2 !important; color: black !important; }
          `}</style>

          <Table responsive striped hover className="mb-0">
            <thead>
              <tr style={{ backgroundColor: '#669bbc', color: 'white' }}>
                <th>ID</th>
                <th>Nombre</th>
                <th>Email</th>
                <th>Rol</th>
                <th>Fecha de Registro</th>
                <th className="text-center">Acciones</th>
              </tr>
            </thead>
            <tbody>
              {users.map(u => (
                <tr key={u.idUsuario}>
                  <td>{u.idUsuario}</td>
                  <td>{u.nombre}</td>
                  <td>{u.email}</td>
                  <td>{u.rol}</td>
                  <td>{formatDate(u.fechaRegistro)}</td>
                  <td className="text-center">
                    <Button
                      size="sm"
                      className="btn-edit me-2"
                      style={{
                        backgroundColor: '#669bbc',
                        border: 'none',
                        borderRadius: '6px',
                        fontWeight: '500',
                      }}
                      onClick={() => navigate(`/users/${u.idUsuario}/edit`)}
                    >
                      Editar
                    </Button>
                    <Button
                      size="sm"
                      className="btn-delete"
                      style={{
                        backgroundColor: '#780000',
                        border: 'none',
                        borderRadius: '6px',
                        fontWeight: '500',
                      }}
                      onClick={() => handleDelete(u.idUsuario)}
                    >
                      Eliminar
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
        </div>
      )}
    </Container>
  );
};

export default Users;

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\services\api.js ---

import axios from 'axios';

const api = axios.create({ baseURL: '/' });
api.interceptors.request.use(config => {
  const token = localStorage.getItem('token');
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});
export default api;

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\services\authService.js ---

import api from './api';

export const login = async (email, contraseña) => {
  const res = await api.post('api/auth/login', { email, contraseña });
  return res.data;
};

export const register = async (nombre, email, contraseña) => {
  try {
    const res = await api.post('/api/auth/registro', { nombre, email, contraseña });
    return res.data;
  } catch (error) {
    throw error; 
  }
};

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\services\clubService.js ---

import api from './api';

/** Listar clubes */
export const getClubs = async (userRole, userId) => {
  const endpoint = userRole === 'Admin' 
    ? '/club' 
    : `/club?gestorId=${userId}`;
  const res = await api.get(endpoint);
  return Array.isArray(res.data) ? res.data : [];
};

/** Crear un nuevo club */
export const createClub = (clubData) =>
  api.post('/club', clubData).then((r) => r.data);

/** Obtener un club por ID */
export const getClubById = (id) =>
  api.get(`/club/${id}`).then((r) => {
    const d = r.data;
    return {
      ...d,
      fechaCreacionClub: d.fechaCreacionClub?.split('T')[0] || '',
    };
  });

/** Actualizar un club */
export const updateClub = (id, data) => {
  const payload = {
    ...data,
    fechaCreacionClub: data.fechaCreacionClub + 'T00:00:00',
  };
  return api.patch(`/club/${id}`, payload).then((r) => r.data);
};

/** Eliminar un club */
export const deleteClub = (id) =>
  api.delete(`/club/${id}`).then((r) => r.data);

/** = FUNCIONES PARA GESTORES = */

/** Traer todos los gestores */
export const getAllGestores = async () => {
  const res = await api.get('/usuarios/gestores');
  return Array.isArray(res.data) ? res.data : [];
};

/** Asignar un gestor a un club */
export const assignGestor = async (clubId, gestorId) => {
  await api.post('/club/asignarUsuario', {
    idClub: clubId,
    idUsuario: gestorId,
  });
};

/** Desvincular un gestor de un club */
export const removeGestor = async (clubId, gestorId) => {
  await api.delete(`/club/${clubId}/gestores/${gestorId}`);
};

/** Buscar un usuario por email  */
export const findUserByEmail = async (email) => {
  const res = await api.get(`/usuarios/email?email=${encodeURIComponent(email)}`);
  return res.data;
};

/** Buscar y asignar por email solo si es GestorClub */
export const assignGestorByEmail = async (clubId, email) => {
  const user = await findUserByEmail(email);
  if (user.rol !== 'GestorClub') {
    const err = new Error('El usuario no tiene rol GestorClub');
    err.code = 'not_gestor';
    throw err;
  }
  await assignGestor(clubId, user.idUsuario);
};

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\services\userService.js ---

import api from './api';

// Obtener usuario actual (propio perfil)
export const getCurrentUser = async () => {
  const res = await api.get('/api/auth/me');
  return res.data;
};

export const getUsers = async () => {
  try {
    const res = await api.get('/usuarios');
    return res.data || []; 
  } catch (error) {
    console.error('Error fetching users:', error);
    return [];
  }
};

// Obtener usuario por ID
export const getUserById = async id => {
  const res = await api.get(`/usuarios/${id}`);
  return res.data;
};

// Actualizar usuario
export const updateUser = async (id, data) => {
  const res = await api.patch(`/usuarios/${id}`, data);
  return res.data;
};

// Eliminar usuario
export const deleteUser = async id => {
  const res = await api.delete(`/usuarios/${id}`);
  return res.data;
};

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\App.jsx ---

import React, { useState } from 'react';
import { Routes, Route, Navigate, useLocation } from 'react-router-dom';
import Sidebar from './components/Sidebar';
import PrivateRoute from './components/PrivateRoute';
import Login from './pages/Login';
import Register from './pages/Register';
import Inicio from './pages/Inicio';
import Users from './pages/Users';
import Profile from './pages/Profile';
import Clubs from './pages/Clubs';
import ClubForm from './pages/ClubForm';

export default function App() {
  const location = useLocation();
  const [sidebarWidth, setSidebarWidth] = useState(200);

  const hideSidebar = location.pathname === '/login' || location.pathname === '/register';

  return (
    <div className="d-flex">
      {!hideSidebar && (
        <Sidebar onToggle={width => setSidebarWidth(width)} />
      )}
      <main
        style={{
          marginLeft: hideSidebar ? 0 : sidebarWidth,
          transition: 'margin-left 0.3s ease',
          width: '100%'
        }}
      >
        <Routes>
          <Route path="/" element={<Navigate to="/inicio" replace />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route element={<PrivateRoute />}>
            <Route path="/inicio" element={<Inicio />} />
            <Route path="/profile" element={<Profile />} />
            <Route path="/users" element={<Users />} />
            <Route path="/users/:id/edit" element={<Profile />} />
            <Route element={<PrivateRoute allowedRoles={['Admin', 'GestorClub']} />}>
              <Route path="/club" element={<Clubs />} />
              <Route path="/club/new" element={<ClubForm />} />
              <Route path="/club/:id" element={<ClubForm />} />
            </Route>
          </Route>
        </Routes>
      </main>
    </div>
  );
}

--- C:\Users\ortiz\OneDrive\Escritorio\PI\front\handballstatspro\src\main.jsx ---

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import { BrowserRouter } from "react-router-dom";
import { AuthProvider } from "./context/AuthContext";
import 'bootstrap/dist/css/bootstrap.min.css';

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <BrowserRouter>               
      <AuthProvider>            
        <App />
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);
